from tkinter import *
import numpy as np
root = Tk()

# Instructions
# Hold and drag left mouse click to define boundaries and obstacles
# Click right mouse key at the place where you want your cleaning bot to be initially  

#global variables for readability
end=False
# global clock
# clock=True
steps=0

count=0

# select the size of mesh
height = 600
width = 600
# select the number of grids in both directions
xn=20
yn=20

height=(height//yn)*yn
width=(width//xn)*xn
y_cell=height//yn
x_cell=width//xn
mem=np.zeros([yn,xn],dtype=np.int16)  # can change to int??
mem-=2
map=np.zeros([yn,xn],dtype=np.int8)

C = Canvas(root, bg="white", height=height, width=width)
C.pack()

for i in range (1,yn):
	C.create_line(0, y_cell*i, width, y_cell*i)
for i in range (1,xn):
	C.create_line(x_cell*i, 0, x_cell*i, height)

def create_barrier(event):
	pos=[event.y//y_cell,event.x//x_cell]
	cox=pos[1]*x_cell
	coy=pos[0]*y_cell
	C.create_rectangle(cox, coy, cox+x_cell, coy+y_cell, fill="black")
	map[pos[0],pos[1]]=-1

def define_node(event):
	global count
	global steps
	global row 
	global col
	global st
	if count==0:
		st=[event.y//y_cell,event.x//x_cell]
		count+=1
		cox=st[1]*x_cell 
		coy=st[0]*y_cell
		mem[st[0],st[1]]=0
		C.create_rectangle(cox, coy, cox+x_cell, coy+y_cell, fill="#fb0")
		row=st[0]
		col=st[1]

def direction(mem,map,xydir):
	global row 
	global col
	global steps
	global end
	if xydir==2:
		if col!=yn-1:
			if map[row][col+1]==0 and mem[row][col+1]==-2:
				return 1
		if row==0 or map[row-1][col]==-1 or mem[row-1][col]!=-2:
			if map[row][col-1]==-1 or mem[row][col-1]!=-2:
				looper=0
				while True:
					looper+=1
					if looper>100:
						end=True
						return 0
					if mem[row+1][col]==-2 and map[row+1][col]==0:
						return -2
					if mem[row-1][col]==-2 and map[row-1][col]==0:
						return 2
					if mem[row][col-1]==-2 and map[row][col-1]==0:
						return -1
					if mem[row][col+1]==-2 and map[row][col+1]==0:
						return 1
					if mem[row][col]-mem[row+1][col]==1:
						row+=1
						steps+=1
					elif mem[row][col]-mem[row-1][col]==1:
						row-=1
						steps+=1
					elif mem[row][col]-mem[row][col+1]==1:
						col+=1
						steps+=1
					elif mem[row][col]-mem[row][col-1]==1:
						col-=1
						steps+=1
					else:
						end=True
						return 0
			else:
				return -1
	elif xydir==-2:
		if col!=0:
			if map[row][col-1]==0 and mem[row][col-1]==-2:
				return -1
		if row==yn-1 or map[row+1][col]==-1 or mem[row+1][col]!=-2:
			if map[row][col+1]==-1 or mem[row][col+1]!=-2:
				looper=0
				while True:
					looper+=1
					if looper>100:
						end=True
						return 0
					if mem[row+1][col]==-2 and map[row+1][col]==0:
						return -2
					if mem[row-1][col]==-2 and map[row-1][col]==0:
						return 2
					if mem[row][col-1]==-2 and map[row][col-1]==0:
						return -1
					if mem[row][col+1]==-2 and map[row][col+1]==0:
						return 1
					if mem[row][col]-mem[row+1][col]==1:
						row+=1
						stesp+=1
					elif mem[row][col]-mem[row-1][col]==1:
						row-=1
						steps+=1
					elif mem[row][col]-mem[row][col+1]==1:
						col+=1
						steps+=1
					elif mem[row][col]-mem[row][col-1]==1:
						col-=1
						steps+=1
					else:
						end=True
						return 0
			else:
				return 1
	elif xydir==1:
		if row!=xn-1:
			if map[row+1][col]==0 and mem[row+1][col]==-2:
				return -2
		if col==xn-1 or map[row][col+1]==-1 or mem[row][col+1]!=-2:
			if map[row-1][col]==-1 or mem[row-1][col]!=-2:
				looper=0
				while True:
					looper+=1
					if looper>100:
						end=True
						return 0
					if mem[row+1][col]==-2 and map[row+1][col]==0:
						return -2
					if mem[row-1][col]==-2 and map[row-1][col]==0:
						return 2
					if mem[row][col-1]==-2 and map[row][col-1]==0:
						return -1
					if mem[row][col+1]==-2 and map[row][col+1]==0:
						return 1
					if mem[row][col]-mem[row+1][col]==1:
						row+=1
						steps+=1
					elif mem[row][col]-mem[row-1][col]==1:
						row-=1
						steps+=1
					elif mem[row][col]-mem[row][col+1]==1:
						col+=1
						steps+=1
					elif mem[row][col]-mem[row][col-1]==1:
						col-=1
						steps+=1
					else:
						end=True
						return 0
			else:
				return 2
	elif xydir==-1:
		if row!=0:
			if map[row-1][col]==0 and mem[row-1][col]==-2:
				return 2
		if col==0 or map[row][col-1]==-1 or mem[row][col-1]!=-2:
			if map[row+1][col]==-1 or mem[row+1][col]!=-2:
				looper=0
				while True:
					looper+=1
					if looper>100:
						end=True
						return 0
					if mem[row+1][col]==-2 and map[row+1][col]==0:
						return -2
					if mem[row-1][col]==-2 and map[row-1][col]==0:
						return 2
					if mem[row][col-1]==-2 and map[row][col-1]==0:
						return -1
					if mem[row][col+1]==-2 and map[row][col+1]==0:
						return 1
					if mem[row][col]-mem[row+1][col]==1:
						row+=1
						steps+=1
					elif mem[row][col]-mem[row-1][col]==1:
						row-=1
						steps+=1
					elif mem[row][col]-mem[row][col+1]==1:
						col+=1
						steps+=1
					elif mem[row][col]-mem[row][col-1]==1:
						col-=1
						steps+=1
					else:
						end=True
						return 0
			else:
				return -2
	return xydir

def sweep(map,mem,xydir):
	global row 
	global col
	global steps
	global end
	xydir=direction(mem,map,xydir)
	steps+=1
	if end==True:
		return 0
	elif xydir==1:
		col+=1
		mem[row][col]=steps
		C.create_rectangle(col*x_cell, row*y_cell, (col+1)*x_cell, (row+1)*y_cell, fill="blue")
		t = C.create_text(col*x_cell+x_cell/2, row*y_cell+y_cell/2, text=steps)
		root.after(300, lambda : sweep(map,mem,xydir))
	elif xydir==-1:
		col-=1
		mem[row][col]=steps
		C.create_rectangle(col*x_cell, row*y_cell, (col+1)*x_cell, (row+1)*y_cell, fill="blue")
		t = C.create_text(col*x_cell+x_cell/2, row*y_cell+y_cell/2, text=steps)
		root.after(300, lambda : sweep(map,mem,xydir))
	elif xydir==2:
		row-=1
		mem[row][col]=steps
		C.create_rectangle(col*x_cell, row*y_cell, (col+1)*x_cell, (row+1)*y_cell, fill="blue")
		t = C.create_text(col*x_cell+x_cell/2, row*y_cell+y_cell/2, text=steps)
		root.after(300, lambda : sweep(map,mem,xydir))
	elif xydir==-2:
		row+=1
		mem[row][col]=steps
		C.create_rectangle(col*x_cell, row*y_cell, (col+1)*x_cell, (row+1)*y_cell, fill="blue")
		t = C.create_text(col*x_cell+x_cell/2, row*y_cell+y_cell/2, text=steps)
		root.after(300, lambda : sweep(map,mem,xydir))

B1 = Button(root, text ="Scrub", relief=RAISED, command = lambda : sweep(map,mem,-1))
B1.pack()
C.bind('<B1-Motion>', create_barrier)
C.bind('<Button-3>', define_node)

root.mainloop()
